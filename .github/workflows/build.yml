name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: coremedia.external.releases
          server-username: PLUGINS_NEXUS_USER
          server-password: PLUGINS_NEXUS_PASSWORD

      - name: Cache Maven Repo
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Setup PNPM
        run: |
          NPM_AUTH_TOKEN=$(curl -s -H "Accept: application/json" -H "Content-Type:application/json" -X PUT --data '{"name": "${{ secrets.CM_NPM_USER }}", "password": "${{ secrets.CM_NPM_READ_ONLY_PASSWORD }}"}' https://npm.coremedia.io/-/user/org.couchdb.user:${{ secrets.CM_NPM_USER }} | jq -r .token)
          echo "::add-mask::$NPM_AUTH_TOKEN"
          echo "NPM_CONFIG_//npm.coremedia.io/:_authToken=$NPM_AUTH_TOKEN" >> $GITHUB_ENV
          npm install -g pnpm@latest

      - name: Setup Git
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.name 'coremedia-ci'
          git config --global user.email 'coremedia-ci@coremedia.com'

      - name: Install PNPM Dependencies
        working-directory: studio-client
        env:
          NPM_CONFIG_@coremedia:registry: 'https://npm.coremedia.io'
          NPM_CONFIG_@jangaroo:registry: 'https://npm.coremedia.io'
        run: pnpm install

      - name: Build with Pnpm
        working-directory: studio-client
        run: |
          pnpm -r build
          pnpm -r package

      - name: Build with Maven
        env:
          PLUGINS_NEXUS_USER: ${{ secrets.PLUGINS_NEXUS_USER }}
          PLUGINS_NEXUS_PASSWORD: ${{ secrets.PLUGINS_NEXUS_PASSWORD }}
        run: mvn --batch-mode --update-snapshots verify

      - name: Create Bundle
        env:
          VERSION: ${{ steps.output-version.outputs.version }}
          DESCRIPTOR_TEMPLATE: 'feedback-hub-adapter-wonki.json'
        run: |
          mkdir -p target/bundle
          RESULT="$(cat ${DESCRIPTOR_TEMPLATE})"
          APPS=$(cat ${DESCRIPTOR_TEMPLATE} | jq -r '.plugins | keys[]')
          for APP in ${APPS}; do
            FILE_TEMPLATE=$(cat ${DESCRIPTOR_TEMPLATE} | jq -r --arg APP "${APP}" '.plugins[$APP].file')
            FILE=$(eval echo ${FILE_TEMPLATE})
            REL_FILE=$(echo "${FILE}" | sed 's#.*/##g')
            cp "${FILE}" target/bundle
            RESULT="$(echo ${RESULT} | jq -r --arg APP "${APP}" --arg REL_FILE "${REL_FILE}" '.plugins[$APP] = {"file": $REL_FILE}')"
          done
          echo "${RESULT}" > "target/bundle/$(echo ${DESCRIPTOR_TEMPLATE} | sed 's#.*/##g' | cut -d '.' -f1)-${VERSION}.json"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: feedback-hub-adapter-wonki-${{ steps.output-version.outputs.version }}
          path: target/bundle
          if-no-files-found: error

